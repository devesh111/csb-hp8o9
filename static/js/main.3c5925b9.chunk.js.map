{"version":3,"sources":["App.js","MyDialog.js","TableIcons.js","index.js"],"names":["max","MyDialog","props","isOpen","onClose","title","children","Dialog","event","open","DialogTitle","Add","forwardRef","ref","AddBox","Check","Clear","Delete","DeleteOutline","DetailPanel","ChevronRight","Edit","Export","SaveAlt","Filter","FilterList","FirstPage","LastPage","NextPage","PreviousPage","ChevronLeft","ResetSearch","Search","SortArrow","ArrowUpward","ThirdStateCheck","Remove","ViewColumn","words","rawData","i","push","id","Math","floor","random","word","length","columns","field","App","useState","data","setData","isDialogOpen","setIsDialogOpen","dialogWord","setDialogWord","dialogId","setDialogId","handleDialogClose","useEffect","actions","icon","tooltip","isFreeAction","onClick","rowData","icons","tableIcons","Paper","style","padding","TextField","value","onInput","target","label","marginTop","Button","rootElement","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.3c5925b9.chunk.js","sourcesContent":["import React, { Fragment, useState, useEffect } from \"react\";\n\nimport { Button, TextField, Paper } from \"@material-ui/core\";\nimport { Add as AddIcon } from \"@material-ui/icons\";\nimport MaterialTable from \"material-table\";\n\nimport MyDialog from \"./MyDialog.js\";\nimport tableIcons from \"./TableIcons.js\";\n\nconst rando = (max) => Math.floor(Math.random() * max);\n\nconst words = [\"Paper\", \"Rock\", \"Scissors\"];\n\nconst rawData = [];\nfor (let i = 0; i < 100; i++) {\n  rawData.push({ id: rando(300), word: words[i % words.length] });\n}\n\nconst columns = [\n  { title: \"Id\", field: \"id\" },\n  { title: \"Word\", field: \"word\" }\n];\n\nconst App = () => {\n  const [data, setData] = useState(rawData);\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n  const [dialogWord, setDialogWord] = useState(\"\");\n  const [dialogId, setDialogId] = useState(\"\");\n\n  const handleDialogClose = (event) => {\n    setIsDialogOpen(false);\n  };\n\n  const handleId = (event) => {\n    setDialogId(event.target.value);\n  };\n\n  const handleWord = (event) => {\n    setDialogWord(event.target.value);\n  };\n\n  const handleAddNewRow = (event) => {\n    if (!dialogId || !dialogWord) return;\n\n    setData(\n      // Here you can add the new row to whatever index you want\n      [{ id: dialogId, word: dialogWord }, ...data]\n    );\n  };\n\n  useEffect(() => {\n    // Closes dialog after saving\n    if (isDialogOpen) {\n      setIsDialogOpen(false);\n    }\n  }, [data]);\n\n  useEffect(() => {\n    // Clears the inputs if `isDialogOpen` equals `false`\n    if (!isDialogOpen) {\n      setDialogId(\"\");\n      setDialogWord(\"\");\n    }\n  }, [isDialogOpen]);\n\n  const actions = [\n    {\n      icon: () => <AddIcon />,\n      tooltip: \"Add User\",\n      isFreeAction: true,\n      onClick: (event, rowData) => {\n        setIsDialogOpen(true);\n      }\n    }\n  ];\n\n  return (\n    <Fragment>\n      <MaterialTable\n        data={data}\n        columns={columns}\n        actions={actions}\n        title=\"Custom Add Row\"\n        icons={tableIcons}\n      />\n\n      <MyDialog\n        title=\"Add User\"\n        isOpen={isDialogOpen}\n        onClose={handleDialogClose}\n      >\n        <Paper style={{ padding: \"2em\" }}>\n          <div>\n            <TextField value={dialogId} onInput={handleId} label=\"Id\" />\n          </div>\n          <div>\n            <TextField value={dialogWord} onInput={handleWord} label=\"Word\" />\n          </div>\n          <div style={{ marginTop: \"3em\" }}>\n            <Button onClick={handleAddNewRow}>Save</Button>\n            <Button onClick={handleDialogClose}>Cancel</Button>\n          </div>\n        </Paper>\n      </MyDialog>\n    </Fragment>\n  );\n};\n\nexport default App;\n","import React from \"react\";\r\nimport { Dialog, DialogTitle } from \"@material-ui/core\";\r\n\r\nconst MyDialog = (props) => {\r\n  const {\r\n    isOpen = false,\r\n    onClose = () => {},\r\n    title = \"My Dialog\",\r\n    children,\r\n    ...rest\r\n  } = props;\r\n\r\n  const handleClose = (event) => {\r\n    onClose(event);\r\n  };\r\n\r\n  return (\r\n    <Dialog onClose={handleClose} open={isOpen}>\r\n      <DialogTitle>{title}</DialogTitle>\r\n      {children}\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nexport default MyDialog;\r\n","import React, { forwardRef } from \"react\";\r\nimport {\r\n  AddBox,\r\n  ArrowUpward,\r\n  Check,\r\n  ChevronLeft,\r\n  ChevronRight,\r\n  Clear,\r\n  DeleteOutline,\r\n  Edit,\r\n  FilterList,\r\n  FirstPage,\r\n  LastPage,\r\n  Remove,\r\n  SaveAlt,\r\n  Search,\r\n  ViewColumn\r\n} from \"@material-ui/icons\";\r\n\r\nexport default {\r\n  // tableIcons\r\n  Add: forwardRef((props, ref) => <AddBox {...props} ref={ref} />),\r\n  Check: forwardRef((props, ref) => <Check {...props} ref={ref} />),\r\n  Clear: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Delete: forwardRef((props, ref) => <DeleteOutline {...props} ref={ref} />),\r\n  DetailPanel: forwardRef((props, ref) => (\r\n    <ChevronRight {...props} ref={ref} />\r\n  )),\r\n  Edit: forwardRef((props, ref) => <Edit {...props} ref={ref} />),\r\n  Export: forwardRef((props, ref) => <SaveAlt {...props} ref={ref} />),\r\n  Filter: forwardRef((props, ref) => <FilterList {...props} ref={ref} />),\r\n  FirstPage: forwardRef((props, ref) => <FirstPage {...props} ref={ref} />),\r\n  LastPage: forwardRef((props, ref) => <LastPage {...props} ref={ref} />),\r\n  NextPage: forwardRef((props, ref) => <ChevronRight {...props} ref={ref} />),\r\n  PreviousPage: forwardRef((props, ref) => (\r\n    <ChevronLeft {...props} ref={ref} />\r\n  )),\r\n  ResetSearch: forwardRef((props, ref) => <Clear {...props} ref={ref} />),\r\n  Search: forwardRef((props, ref) => <Search {...props} ref={ref} />),\r\n  SortArrow: forwardRef((props, ref) => <ArrowUpward {...props} ref={ref} />),\r\n  ThirdStateCheck: forwardRef((props, ref) => <Remove {...props} ref={ref} />),\r\n  ViewColumn: forwardRef((props, ref) => <ViewColumn {...props} ref={ref} />)\r\n};\r\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}